<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="341.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="341.00"> </text><svg id="frames" x="10" width="1180" total_samples="195096"><g><title>DYLD-STUB$$memcmp (58 samples, 0.03%)</title><rect x="0.5367%" y="165" width="0.0297%" height="15" fill="rgb(227,0,7)" fg:x="1047" fg:w="58"/><text x="0.7867%" y="175.50"></text></g><g><title>_platform_memcmp (220 samples, 0.11%)</title><rect x="0.5664%" y="165" width="0.1128%" height="15" fill="rgb(217,0,24)" fg:x="1105" fg:w="220"/><text x="0.8164%" y="175.50"></text></g><g><title>_platform_memmove (5,993 samples, 3.07%)</title><rect x="0.6792%" y="165" width="3.0718%" height="15" fill="rgb(221,193,54)" fg:x="1325" fg:w="5993"/><text x="0.9292%" y="175.50">_pl..</text></g><g><title>_platform_memmove (29 samples, 0.01%)</title><rect x="3.7581%" y="85" width="0.0149%" height="15" fill="rgb(248,212,6)" fg:x="7332" fg:w="29"/><text x="4.0081%" y="95.50"></text></g><g><title>free_medium (72 samples, 0.04%)</title><rect x="3.7730%" y="85" width="0.0369%" height="15" fill="rgb(208,68,35)" fg:x="7361" fg:w="72"/><text x="4.0230%" y="95.50"></text></g><g><title>mvm_madvise_free_plat (72 samples, 0.04%)</title><rect x="3.7730%" y="69" width="0.0369%" height="15" fill="rgb(232,128,0)" fg:x="7361" fg:w="72"/><text x="4.0230%" y="79.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (72 samples, 0.04%)</title><rect x="3.7730%" y="53" width="0.0369%" height="15" fill="rgb(207,160,47)" fg:x="7361" fg:w="72"/><text x="4.0230%" y="63.50"></text></g><g><title>madvise (72 samples, 0.04%)</title><rect x="3.7730%" y="37" width="0.0369%" height="15" fill="rgb(228,23,34)" fg:x="7361" fg:w="72"/><text x="4.0230%" y="47.50"></text></g><g><title>_malloc_zone_realloc (119 samples, 0.06%)</title><rect x="3.7556%" y="117" width="0.0610%" height="15" fill="rgb(218,30,26)" fg:x="7327" fg:w="119"/><text x="4.0056%" y="127.50"></text></g><g><title>szone_realloc (117 samples, 0.06%)</title><rect x="3.7566%" y="101" width="0.0600%" height="15" fill="rgb(220,122,19)" fg:x="7329" fg:w="117"/><text x="4.0066%" y="111.50"></text></g><g><title>_realloc (123 samples, 0.06%)</title><rect x="3.7551%" y="133" width="0.0630%" height="15" fill="rgb(250,228,42)" fg:x="7326" fg:w="123"/><text x="4.0051%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (132 samples, 0.07%)</title><rect x="3.7510%" y="165" width="0.0677%" height="15" fill="rgb(240,193,28)" fg:x="7318" fg:w="132"/><text x="4.0010%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (130 samples, 0.07%)</title><rect x="3.7520%" y="149" width="0.0666%" height="15" fill="rgb(216,20,37)" fg:x="7320" fg:w="130"/><text x="4.0020%" y="159.50"></text></g><g><title>_platform_memmove (38 samples, 0.02%)</title><rect x="3.8197%" y="85" width="0.0195%" height="15" fill="rgb(206,188,39)" fg:x="7452" fg:w="38"/><text x="4.0697%" y="95.50"></text></g><g><title>_realloc (50 samples, 0.03%)</title><rect x="3.8191%" y="133" width="0.0256%" height="15" fill="rgb(217,207,13)" fg:x="7451" fg:w="50"/><text x="4.0691%" y="143.50"></text></g><g><title>_malloc_zone_realloc (49 samples, 0.03%)</title><rect x="3.8197%" y="117" width="0.0251%" height="15" fill="rgb(231,73,38)" fg:x="7452" fg:w="49"/><text x="4.0697%" y="127.50"></text></g><g><title>szone_realloc (49 samples, 0.03%)</title><rect x="3.8197%" y="101" width="0.0251%" height="15" fill="rgb(225,20,46)" fg:x="7452" fg:w="49"/><text x="4.0697%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (52 samples, 0.03%)</title><rect x="3.8186%" y="165" width="0.0267%" height="15" fill="rgb(210,31,41)" fg:x="7450" fg:w="52"/><text x="4.0686%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (52 samples, 0.03%)</title><rect x="3.8186%" y="149" width="0.0267%" height="15" fill="rgb(221,200,47)" fg:x="7450" fg:w="52"/><text x="4.0686%" y="159.50"></text></g><g><title>bascet::io::format::tirp::parse::parse_readpair (3,229 samples, 1.66%)</title><rect x="3.8453%" y="165" width="1.6551%" height="15" fill="rgb(226,26,5)" fg:x="7502" fg:w="3229"/><text x="4.0953%" y="175.50"></text></g><g><title>_platform_memmove (1,712 samples, 0.88%)</title><rect x="5.5055%" y="149" width="0.8775%" height="15" fill="rgb(249,33,26)" fg:x="10741" fg:w="1712"/><text x="5.7555%" y="159.50"></text></g><g><title>free_tiny (132 samples, 0.07%)</title><rect x="6.4230%" y="133" width="0.0677%" height="15" fill="rgb(235,183,28)" fg:x="12531" fg:w="132"/><text x="6.6730%" y="143.50"></text></g><g><title>tiny_free_no_lock (58 samples, 0.03%)</title><rect x="6.4609%" y="117" width="0.0297%" height="15" fill="rgb(221,5,38)" fg:x="12605" fg:w="58"/><text x="6.7109%" y="127.50"></text></g><g><title>__gettimeofday (59 samples, 0.03%)</title><rect x="6.4999%" y="101" width="0.0302%" height="15" fill="rgb(247,18,42)" fg:x="12681" fg:w="59"/><text x="6.7499%" y="111.50"></text></g><g><title>__psynch_cvwait (415 samples, 0.21%)</title><rect x="6.5301%" y="101" width="0.2127%" height="15" fill="rgb(241,131,45)" fg:x="12740" fg:w="415"/><text x="6.7801%" y="111.50"></text></g><g><title>_pthread_mutex_firstfit_lock_slow (58 samples, 0.03%)</title><rect x="6.7444%" y="101" width="0.0297%" height="15" fill="rgb(249,31,29)" fg:x="13158" fg:w="58"/><text x="6.9944%" y="111.50"></text></g><g><title>_pthread_mutex_firstfit_lock_wait (55 samples, 0.03%)</title><rect x="6.7459%" y="85" width="0.0282%" height="15" fill="rgb(225,111,53)" fg:x="13161" fg:w="55"/><text x="6.9959%" y="95.50"></text></g><g><title>__psynch_mutexwait (54 samples, 0.03%)</title><rect x="6.7464%" y="69" width="0.0277%" height="15" fill="rgb(238,160,17)" fg:x="13162" fg:w="54"/><text x="6.9964%" y="79.50"></text></g><g><title>_pthread_cond_wait (547 samples, 0.28%)</title><rect x="6.4953%" y="117" width="0.2804%" height="15" fill="rgb(214,148,48)" fg:x="12672" fg:w="547"/><text x="6.7453%" y="127.50"></text></g><g><title>_pthread_mutex_firstfit_lock_slow (373 samples, 0.19%)</title><rect x="6.7756%" y="117" width="0.1912%" height="15" fill="rgb(232,36,49)" fg:x="13219" fg:w="373"/><text x="7.0256%" y="127.50"></text></g><g><title>_pthread_mutex_firstfit_lock_wait (341 samples, 0.17%)</title><rect x="6.7920%" y="101" width="0.1748%" height="15" fill="rgb(209,103,24)" fg:x="13251" fg:w="341"/><text x="7.0420%" y="111.50"></text></g><g><title>__psynch_mutexwait (336 samples, 0.17%)</title><rect x="6.7946%" y="85" width="0.1722%" height="15" fill="rgb(229,88,8)" fg:x="13256" fg:w="336"/><text x="7.0446%" y="95.50"></text></g><g><title>_pthread_mutex_firstfit_unlock_slow (265 samples, 0.14%)</title><rect x="6.9673%" y="117" width="0.1358%" height="15" fill="rgb(213,181,19)" fg:x="13593" fg:w="265"/><text x="7.2173%" y="127.50"></text></g><g><title>_pthread_mutex_firstfit_wake (251 samples, 0.13%)</title><rect x="6.9745%" y="101" width="0.1287%" height="15" fill="rgb(254,191,54)" fg:x="13607" fg:w="251"/><text x="7.2245%" y="111.50"></text></g><g><title>__psynch_mutexdrop (249 samples, 0.13%)</title><rect x="6.9755%" y="85" width="0.1276%" height="15" fill="rgb(241,83,37)" fg:x="13609" fg:w="249"/><text x="7.2255%" y="95.50"></text></g><g><title>hts_tpool_next_result_locked (313 samples, 0.16%)</title><rect x="7.1155%" y="117" width="0.1604%" height="15" fill="rgb(233,36,39)" fg:x="13882" fg:w="313"/><text x="7.3655%" y="127.50"></text></g><g><title>pthread_cond_signal (247 samples, 0.13%)</title><rect x="7.1493%" y="101" width="0.1266%" height="15" fill="rgb(226,3,54)" fg:x="13948" fg:w="247"/><text x="7.3993%" y="111.50"></text></g><g><title>__psynch_cvsignal (232 samples, 0.12%)</title><rect x="7.1570%" y="85" width="0.1189%" height="15" fill="rgb(245,192,40)" fg:x="13963" fg:w="232"/><text x="7.4070%" y="95.50"></text></g><g><title>hts_tpool_next_result_wait (1,536 samples, 0.79%)</title><rect x="6.4912%" y="133" width="0.7873%" height="15" fill="rgb(238,167,29)" fg:x="12664" fg:w="1536"/><text x="6.7412%" y="143.50"></text></g><g><title>bgzf_read_block (1,757 samples, 0.90%)</title><rect x="6.3933%" y="149" width="0.9006%" height="15" fill="rgb(232,182,51)" fg:x="12473" fg:w="1757"/><text x="6.6433%" y="159.50"></text></g><g><title>bgzf_read (3,515 samples, 1.80%)</title><rect x="5.5004%" y="165" width="1.8017%" height="15" fill="rgb(231,60,39)" fg:x="10731" fg:w="3515"/><text x="5.7504%" y="175.50">b..</text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;(&amp;[u8],bascet::common::readpair::ReadPair),bascet::io::format::error::Error&gt;&gt; (23 samples, 0.01%)</title><rect x="7.3020%" y="165" width="0.0118%" height="15" fill="rgb(208,69,12)" fg:x="14246" fg:w="23"/><text x="7.5520%" y="175.50"></text></g><g><title>free_medium (1,056 samples, 0.54%)</title><rect x="7.3138%" y="165" width="0.5413%" height="15" fill="rgb(235,93,37)" fg:x="14269" fg:w="1056"/><text x="7.5638%" y="175.50"></text></g><g><title>mvm_madvise_free_plat (1,046 samples, 0.54%)</title><rect x="7.3190%" y="149" width="0.5361%" height="15" fill="rgb(213,116,39)" fg:x="14279" fg:w="1046"/><text x="7.5690%" y="159.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (1,046 samples, 0.54%)</title><rect x="7.3190%" y="133" width="0.5361%" height="15" fill="rgb(222,207,29)" fg:x="14279" fg:w="1046"/><text x="7.5690%" y="143.50"></text></g><g><title>madvise (1,046 samples, 0.54%)</title><rect x="7.3190%" y="117" width="0.5361%" height="15" fill="rgb(206,96,30)" fg:x="14279" fg:w="1046"/><text x="7.5690%" y="127.50"></text></g><g><title>__bzero (1,051 samples, 0.54%)</title><rect x="7.8577%" y="133" width="0.5387%" height="15" fill="rgb(218,138,4)" fg:x="15330" fg:w="1051"/><text x="8.1077%" y="143.50"></text></g><g><title>medium_malloc_should_clear (1,052 samples, 0.54%)</title><rect x="7.8577%" y="149" width="0.5392%" height="15" fill="rgb(250,191,14)" fg:x="15330" fg:w="1052"/><text x="8.1077%" y="159.50"></text></g><g><title>szone_malloc_should_clear (1,062 samples, 0.54%)</title><rect x="7.8556%" y="165" width="0.5443%" height="15" fill="rgb(239,60,40)" fg:x="15326" fg:w="1062"/><text x="8.1056%" y="175.50"></text></g><g><title>&lt;bascet::io::format::tirp::stream::Stream&lt;T&gt; as bascet::io::traits::BascetStream&lt;T&gt;&gt;::next_cell (16,383 samples, 8.40%)</title><rect x="0.0031%" y="181" width="8.3974%" height="15" fill="rgb(206,27,48)" fg:x="6" fg:w="16383"/><text x="0.2531%" y="191.50">&lt;bascet::io:..</text></g><g><title>bascet::io::format::tirp::parse::parse_readpair (37 samples, 0.02%)</title><rect x="8.4020%" y="181" width="0.0190%" height="15" fill="rgb(225,35,8)" fg:x="16392" fg:w="37"/><text x="8.6520%" y="191.50"></text></g><g><title>bascet::command::countsketch::CountsketchCMD::try_execute (16,474 samples, 8.44%)</title><rect x="0.0031%" y="197" width="8.4440%" height="15" fill="rgb(250,213,24)" fg:x="6" fg:w="16474"/><text x="0.2531%" y="207.50">bascet::comm..</text></g><g><title>start (16,480 samples, 8.45%)</title><rect x="0.0005%" y="293" width="8.4471%" height="15" fill="rgb(247,123,22)" fg:x="1" fg:w="16480"/><text x="0.2505%" y="303.50">start</text></g><g><title>main (16,476 samples, 8.45%)</title><rect x="0.0026%" y="277" width="8.4451%" height="15" fill="rgb(231,138,38)" fg:x="5" fg:w="16476"/><text x="0.2526%" y="287.50">main</text></g><g><title>std::rt::lang_start_internal (16,476 samples, 8.45%)</title><rect x="0.0026%" y="261" width="8.4451%" height="15" fill="rgb(231,145,46)" fg:x="5" fg:w="16476"/><text x="0.2526%" y="271.50">std::rt::lan..</text></g><g><title>std::rt::lang_start::_{{closure}} (16,476 samples, 8.45%)</title><rect x="0.0026%" y="245" width="8.4451%" height="15" fill="rgb(251,118,11)" fg:x="5" fg:w="16476"/><text x="0.2526%" y="255.50">std::rt::lan..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (16,476 samples, 8.45%)</title><rect x="0.0026%" y="229" width="8.4451%" height="15" fill="rgb(217,147,25)" fg:x="5" fg:w="16476"/><text x="0.2526%" y="239.50">std::sys::ba..</text></g><g><title>bascet::main (16,476 samples, 8.45%)</title><rect x="0.0026%" y="213" width="8.4451%" height="15" fill="rgb(247,81,37)" fg:x="5" fg:w="16476"/><text x="0.2526%" y="223.50">bascet::main</text></g><g><title>fd_read (1,432 samples, 0.73%)</title><rect x="8.5066%" y="197" width="0.7340%" height="15" fill="rgb(209,12,38)" fg:x="16596" fg:w="1432"/><text x="8.7566%" y="207.50"></text></g><g><title>read (1,424 samples, 0.73%)</title><rect x="8.5107%" y="181" width="0.7299%" height="15" fill="rgb(227,1,9)" fg:x="16604" fg:w="1424"/><text x="8.7607%" y="191.50"></text></g><g><title>hpeek (1,466 samples, 0.75%)</title><rect x="8.4902%" y="229" width="0.7514%" height="15" fill="rgb(248,47,43)" fg:x="16564" fg:w="1466"/><text x="8.7402%" y="239.50"></text></g><g><title>refill_buffer (1,441 samples, 0.74%)</title><rect x="8.5030%" y="213" width="0.7386%" height="15" fill="rgb(221,10,30)" fg:x="16589" fg:w="1441"/><text x="8.7530%" y="223.50"></text></g><g><title>hread2 (1,577 samples, 0.81%)</title><rect x="9.2431%" y="229" width="0.8083%" height="15" fill="rgb(210,229,1)" fg:x="18033" fg:w="1577"/><text x="9.4931%" y="239.50"></text></g><g><title>fd_read (1,569 samples, 0.80%)</title><rect x="9.2472%" y="213" width="0.8042%" height="15" fill="rgb(222,148,37)" fg:x="18041" fg:w="1569"/><text x="9.4972%" y="223.50"></text></g><g><title>read (1,567 samples, 0.80%)</title><rect x="9.2483%" y="197" width="0.8032%" height="15" fill="rgb(234,67,33)" fg:x="18043" fg:w="1567"/><text x="9.4983%" y="207.50"></text></g><g><title>bgzf_mt_read_block (3,252 samples, 1.67%)</title><rect x="8.4722%" y="245" width="1.6669%" height="15" fill="rgb(247,98,35)" fg:x="16529" fg:w="3252"/><text x="8.7222%" y="255.50"></text></g><g><title>hread (171 samples, 0.09%)</title><rect x="10.0515%" y="229" width="0.0876%" height="15" fill="rgb(247,138,52)" fg:x="19610" fg:w="171"/><text x="10.3015%" y="239.50"></text></g><g><title>_platform_memmove (171 samples, 0.09%)</title><rect x="10.0515%" y="213" width="0.0876%" height="15" fill="rgb(213,79,30)" fg:x="19610" fg:w="171"/><text x="10.3015%" y="223.50"></text></g><g><title>__psynch_cvwait (724 samples, 0.37%)</title><rect x="10.1755%" y="213" width="0.3711%" height="15" fill="rgb(246,177,23)" fg:x="19852" fg:w="724"/><text x="10.4255%" y="223.50"></text></g><g><title>_pthread_mutex_firstfit_lock_slow (163 samples, 0.08%)</title><rect x="10.5502%" y="213" width="0.0835%" height="15" fill="rgb(230,62,27)" fg:x="20583" fg:w="163"/><text x="10.8002%" y="223.50"></text></g><g><title>_pthread_mutex_firstfit_lock_wait (153 samples, 0.08%)</title><rect x="10.5553%" y="197" width="0.0784%" height="15" fill="rgb(216,154,8)" fg:x="20593" fg:w="153"/><text x="10.8053%" y="207.50"></text></g><g><title>__psynch_mutexwait (151 samples, 0.08%)</title><rect x="10.5563%" y="181" width="0.0774%" height="15" fill="rgb(244,35,45)" fg:x="20595" fg:w="151"/><text x="10.8063%" y="191.50"></text></g><g><title>_pthread_cond_wait (921 samples, 0.47%)</title><rect x="10.1653%" y="229" width="0.4721%" height="15" fill="rgb(251,115,12)" fg:x="19832" fg:w="921"/><text x="10.4153%" y="239.50"></text></g><g><title>_pthread_mutex_firstfit_lock_slow (280 samples, 0.14%)</title><rect x="10.6373%" y="229" width="0.1435%" height="15" fill="rgb(240,54,50)" fg:x="20753" fg:w="280"/><text x="10.8873%" y="239.50"></text></g><g><title>_pthread_mutex_firstfit_lock_wait (246 samples, 0.13%)</title><rect x="10.6548%" y="213" width="0.1261%" height="15" fill="rgb(233,84,52)" fg:x="20787" fg:w="246"/><text x="10.9048%" y="223.50"></text></g><g><title>__psynch_mutexwait (243 samples, 0.12%)</title><rect x="10.6563%" y="197" width="0.1246%" height="15" fill="rgb(207,117,47)" fg:x="20790" fg:w="243"/><text x="10.9063%" y="207.50"></text></g><g><title>_pthread_mutex_firstfit_unlock_slow (165 samples, 0.08%)</title><rect x="10.7808%" y="229" width="0.0846%" height="15" fill="rgb(249,43,39)" fg:x="21033" fg:w="165"/><text x="11.0308%" y="239.50"></text></g><g><title>_pthread_mutex_firstfit_wake (148 samples, 0.08%)</title><rect x="10.7896%" y="213" width="0.0759%" height="15" fill="rgb(209,38,44)" fg:x="21050" fg:w="148"/><text x="11.0396%" y="223.50"></text></g><g><title>__psynch_mutexdrop (148 samples, 0.08%)</title><rect x="10.7896%" y="197" width="0.0759%" height="15" fill="rgb(236,212,23)" fg:x="21050" fg:w="148"/><text x="11.0396%" y="207.50"></text></g><g><title>__psynch_cvsignal (204 samples, 0.10%)</title><rect x="10.8726%" y="213" width="0.1046%" height="15" fill="rgb(242,79,21)" fg:x="21212" fg:w="204"/><text x="11.1226%" y="223.50"></text></g><g><title>pthread_cond_signal (212 samples, 0.11%)</title><rect x="10.8690%" y="229" width="0.1087%" height="15" fill="rgb(211,96,35)" fg:x="21205" fg:w="212"/><text x="11.1190%" y="239.50"></text></g><g><title>szone_malloc_should_clear (83 samples, 0.04%)</title><rect x="10.9797%" y="229" width="0.0425%" height="15" fill="rgb(253,215,40)" fg:x="21421" fg:w="83"/><text x="11.2297%" y="239.50"></text></g><g><title>tiny_malloc_should_clear (78 samples, 0.04%)</title><rect x="10.9823%" y="213" width="0.0400%" height="15" fill="rgb(211,81,21)" fg:x="21426" fg:w="78"/><text x="11.2323%" y="223.50"></text></g><g><title>tiny_malloc_from_free_list (65 samples, 0.03%)</title><rect x="10.9889%" y="197" width="0.0333%" height="15" fill="rgb(208,190,38)" fg:x="21439" fg:w="65"/><text x="11.2389%" y="207.50"></text></g><g><title>hts_tpool_dispatch3 (1,722 samples, 0.88%)</title><rect x="10.1412%" y="245" width="0.8826%" height="15" fill="rgb(235,213,38)" fg:x="19785" fg:w="1722"/><text x="10.3912%" y="255.50"></text></g><g><title>pthread_mutex_unlock (21 samples, 0.01%)</title><rect x="11.0325%" y="245" width="0.0108%" height="15" fill="rgb(237,122,38)" fg:x="21524" fg:w="21"/><text x="11.2825%" y="255.50"></text></g><g><title>bgzf_mt_reader (5,056 samples, 2.59%)</title><rect x="8.4522%" y="261" width="2.5915%" height="15" fill="rgb(244,218,35)" fg:x="16490" fg:w="5056"/><text x="8.7022%" y="271.50">bg..</text></g><g><title>&lt;deduplicated_symbol&gt; (49 samples, 0.03%)</title><rect x="52.4526%" y="197" width="0.0251%" height="15" fill="rgb(240,68,47)" fg:x="102333" fg:w="49"/><text x="52.7026%" y="207.50"></text></g><g><title>DYLD-STUB$$free (115 samples, 0.06%)</title><rect x="52.4778%" y="197" width="0.0589%" height="15" fill="rgb(210,16,53)" fg:x="102382" fg:w="115"/><text x="52.7278%" y="207.50"></text></g><g><title>DYLD-STUB$$malloc (30 samples, 0.02%)</title><rect x="52.5367%" y="197" width="0.0154%" height="15" fill="rgb(235,124,12)" fg:x="102497" fg:w="30"/><text x="52.7867%" y="207.50"></text></g><g><title>__rustc::__rdl_alloc (58 samples, 0.03%)</title><rect x="52.5531%" y="197" width="0.0297%" height="15" fill="rgb(224,169,11)" fg:x="102529" fg:w="58"/><text x="52.8031%" y="207.50"></text></g><g><title>_free (291 samples, 0.15%)</title><rect x="52.5839%" y="197" width="0.1492%" height="15" fill="rgb(250,166,2)" fg:x="102589" fg:w="291"/><text x="52.8339%" y="207.50"></text></g><g><title>_malloc_zone_malloc (319 samples, 0.16%)</title><rect x="52.7330%" y="197" width="0.1635%" height="15" fill="rgb(242,216,29)" fg:x="102880" fg:w="319"/><text x="52.9830%" y="207.50"></text></g><g><title>_szone_free (187 samples, 0.10%)</title><rect x="52.9022%" y="197" width="0.0959%" height="15" fill="rgb(230,116,27)" fg:x="103210" fg:w="187"/><text x="53.1522%" y="207.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1,560 samples, 0.80%)</title><rect x="52.9990%" y="181" width="0.7996%" height="15" fill="rgb(228,99,48)" fg:x="103399" fg:w="1560"/><text x="53.2490%" y="191.50"></text></g><g><title>free_medium (1,559 samples, 0.80%)</title><rect x="52.9995%" y="165" width="0.7991%" height="15" fill="rgb(253,11,6)" fg:x="103400" fg:w="1559"/><text x="53.2495%" y="175.50"></text></g><g><title>mvm_madvise_free_plat (1,555 samples, 0.80%)</title><rect x="53.0016%" y="149" width="0.7970%" height="15" fill="rgb(247,143,39)" fg:x="103404" fg:w="1555"/><text x="53.2516%" y="159.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (1,555 samples, 0.80%)</title><rect x="53.0016%" y="133" width="0.7970%" height="15" fill="rgb(236,97,10)" fg:x="103404" fg:w="1555"/><text x="53.2516%" y="143.50"></text></g><g><title>madvise (1,555 samples, 0.80%)</title><rect x="53.0016%" y="117" width="0.7970%" height="15" fill="rgb(233,208,19)" fg:x="103404" fg:w="1555"/><text x="53.2516%" y="127.50"></text></g><g><title>free_medium (437 samples, 0.22%)</title><rect x="53.7986%" y="181" width="0.2240%" height="15" fill="rgb(216,164,2)" fg:x="104959" fg:w="437"/><text x="54.0486%" y="191.50"></text></g><g><title>mvm_madvise_free_plat (437 samples, 0.22%)</title><rect x="53.7986%" y="165" width="0.2240%" height="15" fill="rgb(220,129,5)" fg:x="104959" fg:w="437"/><text x="54.0486%" y="175.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (437 samples, 0.22%)</title><rect x="53.7986%" y="149" width="0.2240%" height="15" fill="rgb(242,17,10)" fg:x="104959" fg:w="437"/><text x="54.0486%" y="159.50"></text></g><g><title>madvise (437 samples, 0.22%)</title><rect x="53.7986%" y="133" width="0.2240%" height="15" fill="rgb(242,107,0)" fg:x="104959" fg:w="437"/><text x="54.0486%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;bascet::command::countsketch::StreamTokenBuilder&gt; (1,998 samples, 1.02%)</title><rect x="52.9990%" y="197" width="1.0241%" height="15" fill="rgb(251,28,31)" fg:x="103399" fg:w="1998"/><text x="53.2490%" y="207.50"></text></g><g><title>crossbeam_channel::channel::Receiver&lt;T&gt;::recv (43 samples, 0.02%)</title><rect x="54.0231%" y="197" width="0.0220%" height="15" fill="rgb(233,223,10)" fg:x="105397" fg:w="43"/><text x="54.2731%" y="207.50"></text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::recv (43 samples, 0.02%)</title><rect x="54.0231%" y="181" width="0.0220%" height="15" fill="rgb(215,21,27)" fg:x="105397" fg:w="43"/><text x="54.2731%" y="191.50"></text></g><g><title>DYLD-STUB$$_platform_memset (61 samples, 0.03%)</title><rect x="54.4173%" y="181" width="0.0313%" height="15" fill="rgb(232,23,21)" fg:x="106166" fg:w="61"/><text x="54.6673%" y="191.50"></text></g><g><title>_platform_memset (180 samples, 0.09%)</title><rect x="54.4491%" y="181" width="0.0923%" height="15" fill="rgb(244,5,23)" fg:x="106228" fg:w="180"/><text x="54.6991%" y="191.50"></text></g><g><title>free_tiny (980 samples, 0.50%)</title><rect x="54.0457%" y="197" width="0.5023%" height="15" fill="rgb(226,81,46)" fg:x="105441" fg:w="980"/><text x="54.2957%" y="207.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (20 samples, 0.01%)</title><rect x="54.5496%" y="197" width="0.0103%" height="15" fill="rgb(247,70,30)" fg:x="106424" fg:w="20"/><text x="54.7996%" y="207.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (20 samples, 0.01%)</title><rect x="54.5496%" y="181" width="0.0103%" height="15" fill="rgb(212,68,19)" fg:x="106424" fg:w="20"/><text x="54.7996%" y="191.50"></text></g><g><title>&lt;std::fs::File as std::io::Write&gt;::write (20 samples, 0.01%)</title><rect x="54.5496%" y="165" width="0.0103%" height="15" fill="rgb(240,187,13)" fg:x="106424" fg:w="20"/><text x="54.7996%" y="175.50"></text></g><g><title>write (20 samples, 0.01%)</title><rect x="54.5496%" y="149" width="0.0103%" height="15" fill="rgb(223,113,26)" fg:x="106424" fg:w="20"/><text x="54.7996%" y="159.50"></text></g><g><title>rack_get_thread_index (138 samples, 0.07%)</title><rect x="54.8443%" y="165" width="0.0707%" height="15" fill="rgb(206,192,2)" fg:x="106999" fg:w="138"/><text x="55.0943%" y="175.50"></text></g><g><title>szone_malloc_should_clear (706 samples, 0.36%)</title><rect x="54.5603%" y="197" width="0.3619%" height="15" fill="rgb(241,108,4)" fg:x="106445" fg:w="706"/><text x="54.8103%" y="207.50"></text></g><g><title>tiny_malloc_should_clear (544 samples, 0.28%)</title><rect x="54.6434%" y="181" width="0.2788%" height="15" fill="rgb(247,173,49)" fg:x="106607" fg:w="544"/><text x="54.8934%" y="191.50"></text></g><g><title>&lt;F as threadpool::FnBox&gt;::call_box (85,626 samples, 43.89%)</title><rect x="11.0458%" y="213" width="43.8892%" height="15" fill="rgb(224,114,35)" fg:x="21550" fg:w="85626"/><text x="11.2958%" y="223.50">&lt;F as threadpool::FnBox&gt;::call_box</text></g><g><title>tiny_malloc_should_clear (23 samples, 0.01%)</title><rect x="54.9232%" y="197" width="0.0118%" height="15" fill="rgb(245,159,27)" fg:x="107153" fg:w="23"/><text x="55.1732%" y="207.50"></text></g><g><title>_szone_free (67 samples, 0.03%)</title><rect x="54.9350%" y="213" width="0.0343%" height="15" fill="rgb(245,172,44)" fg:x="107176" fg:w="67"/><text x="55.1850%" y="223.50"></text></g><g><title>free_tiny (46 samples, 0.02%)</title><rect x="54.9693%" y="213" width="0.0236%" height="15" fill="rgb(236,23,11)" fg:x="107243" fg:w="46"/><text x="55.2193%" y="223.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (85,795 samples, 43.98%)</title><rect x="11.0453%" y="261" width="43.9758%" height="15" fill="rgb(205,117,38)" fg:x="21549" fg:w="85795"/><text x="11.2953%" y="271.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (85,794 samples, 43.98%)</title><rect x="11.0458%" y="245" width="43.9753%" height="15" fill="rgb(237,72,25)" fg:x="21550" fg:w="85794"/><text x="11.2958%" y="255.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (85,794 samples, 43.98%)</title><rect x="11.0458%" y="229" width="43.9753%" height="15" fill="rgb(244,70,9)" fg:x="21550" fg:w="85794"/><text x="11.2958%" y="239.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>szone_malloc_should_clear (54 samples, 0.03%)</title><rect x="54.9934%" y="213" width="0.0277%" height="15" fill="rgb(217,125,39)" fg:x="107290" fg:w="54"/><text x="55.2434%" y="223.50"></text></g><g><title>__psynch_cvwait (745 samples, 0.38%)</title><rect x="55.0924%" y="229" width="0.3819%" height="15" fill="rgb(235,36,10)" fg:x="107483" fg:w="745"/><text x="55.3424%" y="239.50"></text></g><g><title>_pthread_mutex_firstfit_lock_slow (135 samples, 0.07%)</title><rect x="55.4763%" y="229" width="0.0692%" height="15" fill="rgb(251,123,47)" fg:x="108232" fg:w="135"/><text x="55.7263%" y="239.50"></text></g><g><title>_pthread_mutex_firstfit_lock_wait (127 samples, 0.07%)</title><rect x="55.4804%" y="213" width="0.0651%" height="15" fill="rgb(221,13,13)" fg:x="108240" fg:w="127"/><text x="55.7304%" y="223.50"></text></g><g><title>__psynch_mutexwait (127 samples, 0.07%)</title><rect x="55.4804%" y="197" width="0.0651%" height="15" fill="rgb(238,131,9)" fg:x="108240" fg:w="127"/><text x="55.7304%" y="207.50"></text></g><g><title>_pthread_cond_wait (930 samples, 0.48%)</title><rect x="55.0734%" y="245" width="0.4767%" height="15" fill="rgb(211,50,8)" fg:x="107446" fg:w="930"/><text x="55.3234%" y="255.50"></text></g><g><title>_pthread_mutex_firstfit_lock_slow (560 samples, 0.29%)</title><rect x="55.5501%" y="245" width="0.2870%" height="15" fill="rgb(245,182,24)" fg:x="108376" fg:w="560"/><text x="55.8001%" y="255.50"></text></g><g><title>_pthread_mutex_firstfit_lock_wait (482 samples, 0.25%)</title><rect x="55.5901%" y="229" width="0.2471%" height="15" fill="rgb(242,14,37)" fg:x="108454" fg:w="482"/><text x="55.8401%" y="239.50"></text></g><g><title>__psynch_mutexwait (476 samples, 0.24%)</title><rect x="55.5931%" y="213" width="0.2440%" height="15" fill="rgb(246,228,12)" fg:x="108460" fg:w="476"/><text x="55.8431%" y="223.50"></text></g><g><title>_pthread_mutex_firstfit_unlock_slow (560 samples, 0.29%)</title><rect x="55.8371%" y="245" width="0.2870%" height="15" fill="rgb(213,55,15)" fg:x="108936" fg:w="560"/><text x="56.0871%" y="255.50"></text></g><g><title>_pthread_mutex_firstfit_wake (531 samples, 0.27%)</title><rect x="55.8520%" y="229" width="0.2722%" height="15" fill="rgb(209,9,3)" fg:x="108965" fg:w="531"/><text x="56.1020%" y="239.50"></text></g><g><title>__psynch_mutexdrop (531 samples, 0.27%)</title><rect x="55.8520%" y="213" width="0.2722%" height="15" fill="rgb(230,59,30)" fg:x="108965" fg:w="531"/><text x="56.1020%" y="223.50"></text></g><g><title>inflate (72 samples, 0.04%)</title><rect x="56.1513%" y="197" width="0.0369%" height="15" fill="rgb(209,121,21)" fg:x="109549" fg:w="72"/><text x="56.4013%" y="207.50"></text></g><g><title>bgzf_uncompress (80 samples, 0.04%)</title><rect x="56.1513%" y="213" width="0.0410%" height="15" fill="rgb(220,109,13)" fg:x="109549" fg:w="80"/><text x="56.4013%" y="223.50"></text></g><g><title>crc32_z (2,648 samples, 1.36%)</title><rect x="56.1923%" y="213" width="1.3573%" height="15" fill="rgb(232,18,1)" fg:x="109629" fg:w="2648"/><text x="56.4423%" y="223.50"></text></g><g><title>inflate (537 samples, 0.28%)</title><rect x="57.5527%" y="197" width="0.2752%" height="15" fill="rgb(215,41,42)" fg:x="112283" fg:w="537"/><text x="57.8027%" y="207.50"></text></g><g><title>inflate (2,281 samples, 1.17%)</title><rect x="57.5517%" y="213" width="1.1692%" height="15" fill="rgb(224,123,36)" fg:x="112281" fg:w="2281"/><text x="57.8017%" y="223.50"></text></g><g><title>inflate_table (1,740 samples, 0.89%)</title><rect x="57.8290%" y="197" width="0.8919%" height="15" fill="rgb(240,125,3)" fg:x="112822" fg:w="1740"/><text x="58.0790%" y="207.50"></text></g><g><title>_szone_free (22 samples, 0.01%)</title><rect x="58.7244%" y="197" width="0.0113%" height="15" fill="rgb(205,98,50)" fg:x="114569" fg:w="22"/><text x="58.9744%" y="207.50"></text></g><g><title>free_small (32 samples, 0.02%)</title><rect x="58.7362%" y="197" width="0.0164%" height="15" fill="rgb(205,185,37)" fg:x="114592" fg:w="32"/><text x="58.9862%" y="207.50"></text></g><g><title>inflateEnd (65 samples, 0.03%)</title><rect x="58.7208%" y="213" width="0.0333%" height="15" fill="rgb(238,207,15)" fg:x="114562" fg:w="65"/><text x="58.9708%" y="223.50"></text></g><g><title>inflateReset2 (28 samples, 0.01%)</title><rect x="58.7654%" y="197" width="0.0144%" height="15" fill="rgb(213,199,42)" fg:x="114649" fg:w="28"/><text x="59.0154%" y="207.50"></text></g><g><title>szone_malloc_should_clear (56 samples, 0.03%)</title><rect x="58.7803%" y="197" width="0.0287%" height="15" fill="rgb(235,201,11)" fg:x="114678" fg:w="56"/><text x="59.0303%" y="207.50"></text></g><g><title>small_malloc_should_clear (52 samples, 0.03%)</title><rect x="58.7823%" y="181" width="0.0267%" height="15" fill="rgb(207,46,11)" fg:x="114682" fg:w="52"/><text x="59.0323%" y="191.50"></text></g><g><title>inflateInit2_ (112 samples, 0.06%)</title><rect x="58.7542%" y="213" width="0.0574%" height="15" fill="rgb(241,35,35)" fg:x="114627" fg:w="112"/><text x="59.0042%" y="223.50"></text></g><g><title>inflate_fast (79,294 samples, 40.64%)</title><rect x="58.8116%" y="213" width="40.6436%" height="15" fill="rgb(243,32,47)" fg:x="114739" fg:w="79294"/><text x="59.0616%" y="223.50">inflate_fast</text></g><g><title>bgzf_decode_func (84,517 samples, 43.32%)</title><rect x="56.1354%" y="245" width="43.3207%" height="15" fill="rgb(247,202,23)" fg:x="109518" fg:w="84517"/><text x="56.3854%" y="255.50">bgzf_decode_func</text></g><g><title>bgzf_uncompress (84,509 samples, 43.32%)</title><rect x="56.1395%" y="229" width="43.3166%" height="15" fill="rgb(219,102,11)" fg:x="109526" fg:w="84509"/><text x="56.3895%" y="239.50">bgzf_uncompress</text></g><g><title>free_tiny (138 samples, 0.07%)</title><rect x="99.4562%" y="245" width="0.0707%" height="15" fill="rgb(243,110,44)" fg:x="194035" fg:w="138"/><text x="99.7062%" y="255.50"></text></g><g><title>tiny_free_no_lock (83 samples, 0.04%)</title><rect x="99.4844%" y="229" width="0.0425%" height="15" fill="rgb(222,74,54)" fg:x="194090" fg:w="83"/><text x="99.7344%" y="239.50"></text></g><g><title>__psynch_cvbroad (810 samples, 0.42%)</title><rect x="99.5346%" y="229" width="0.4152%" height="15" fill="rgb(216,99,12)" fg:x="194188" fg:w="810"/><text x="99.7846%" y="239.50"></text></g><g><title>pthread_cond_broadcast (827 samples, 0.42%)</title><rect x="99.5274%" y="245" width="0.4239%" height="15" fill="rgb(226,22,26)" fg:x="194174" fg:w="827"/><text x="99.7774%" y="255.50"></text></g><g><title>szone_malloc_should_clear (78 samples, 0.04%)</title><rect x="99.9569%" y="245" width="0.0400%" height="15" fill="rgb(217,163,10)" fg:x="195012" fg:w="78"/><text x="100.2069%" y="255.50"></text></g><g><title>tiny_malloc_should_clear (72 samples, 0.04%)</title><rect x="99.9600%" y="229" width="0.0369%" height="15" fill="rgb(213,25,53)" fg:x="195018" fg:w="72"/><text x="100.2100%" y="239.50"></text></g><g><title>tiny_malloc_from_free_list (44 samples, 0.02%)</title><rect x="99.9744%" y="213" width="0.0226%" height="15" fill="rgb(252,105,26)" fg:x="195046" fg:w="44"/><text x="100.2244%" y="223.50"></text></g><g><title>all (195,096 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(220,39,43)" fg:x="0" fg:w="195096"/><text x="0.2500%" y="319.50"></text></g><g><title>thread_start (178,615 samples, 91.55%)</title><rect x="8.4476%" y="293" width="91.5524%" height="15" fill="rgb(229,68,48)" fg:x="16481" fg:w="178615"/><text x="8.6976%" y="303.50">thread_start</text></g><g><title>_pthread_start (178,615 samples, 91.55%)</title><rect x="8.4476%" y="277" width="91.5524%" height="15" fill="rgb(252,8,32)" fg:x="16481" fg:w="178615"/><text x="8.6976%" y="287.50">_pthread_start</text></g><g><title>tpool_worker (87,750 samples, 44.98%)</title><rect x="55.0221%" y="261" width="44.9779%" height="15" fill="rgb(223,20,43)" fg:x="107346" fg:w="87750"/><text x="55.2721%" y="271.50">tpool_worker</text></g></svg></svg>